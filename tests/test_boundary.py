import pytest
from config.config import Config

class TestBoundary:
    """–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞–π–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    
    def test_first_user(self, api_client):
        """–¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞)"""
        response = api_client.get(f"{Config.USERS_ENDPOINT}/1")
        
        assert response.status_code == 200
        user = response.json()
        assert user["id"] == 1
        assert len(user["name"]) > 0
    
    def test_last_user(self, api_client):
        """–¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞)"""
        response = api_client.get(f"{Config.USERS_ENDPOINT}/10")
        
        assert response.status_code == 200
        user = response.json()
        assert user["id"] == 10
        assert len(user["name"]) > 0
    
    def test_first_post(self, api_client):
        """–¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞)"""
        response = api_client.get(f"{Config.POSTS_ENDPOINT}/1")
        
        assert response.status_code == 200
        post = response.json()
        assert post["id"] == 1
        assert post["userId"] >= 1
    
    def test_last_post(self, api_client):
        """–¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞)"""
        response = api_client.get(f"{Config.POSTS_ENDPOINT}/100")
        
        assert response.status_code == 200
        post = response.json()
        assert post["id"] == 100
        assert post["userId"] <= 10
    
    @pytest.mark.parametrize("boundary_id", [0, 11, 101, -1])
    def test_beyond_boundaries(self, api_client, boundary_id):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö ID"""
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (1-10)
        if boundary_id in [0, 11, -1]:
            response = api_client.get(f"{Config.USERS_ENDPOINT}/{boundary_id}")
            assert response.status_code == 404
        
        # –î–ª—è –ø–æ—Å—Ç–æ–≤ (1-100)  
        if boundary_id in [0, 101, -1]:
            response = api_client.get(f"{Config.POSTS_ENDPOINT}/{boundary_id}")
            assert response.status_code == 404
    
    def test_create_user_empty_fields(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏"""
        empty_user = {
            "name": "",
            "username": "",
            "email": ""
        }
        
        response = api_client.post(Config.USERS_ENDPOINT, json=empty_user)
        # JSONPlaceholder –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Å—Ç—ã–µ –ø–æ–ª—è, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º API —ç—Ç–æ –±—ã–ª–∞ –±—ã –æ—à–∏–±–∫–∞
        assert response.status_code == 201
        created_user = response.json()
        assert "id" in created_user
    
    def test_create_user_very_long_name(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        long_name = "A" * 1000  # –°—Ç—Ä–æ–∫–∞ –∏–∑ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        
        long_user = {
            "name": long_name,
            "username": "testuser",
            "email": "test@example.com"
        }
        
        response = api_client.post(Config.USERS_ENDPOINT, json=long_user)
        assert response.status_code == 201
        created_user = response.json()
        assert created_user["name"] == long_name
    
    def test_create_post_empty_title_body(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Ç–µ–ª–æ–º"""
        empty_post = {
            "title": "",
            "body": "",
            "userId": 1
        }
        
        response = api_client.post(Config.POSTS_ENDPOINT, json=empty_post)
        assert response.status_code == 201
        created_post = response.json()
        assert created_post["title"] == ""
        assert created_post["body"] == ""
    
    @pytest.mark.parametrize("special_char", ["<script>", "'; DROP TABLE users; --", "üöÄüéâ", "null"])
    def test_special_characters_in_name(self, api_client, special_char):
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        special_user = {
            "name": special_char,
            "username": "testuser",
            "email": "test@example.com"
        }
        
        response = api_client.post(Config.USERS_ENDPOINT, json=special_user)
        assert response.status_code == 201
        created_user = response.json()
        assert created_user["name"] == special_char
